// Code generated by hertz generator.

package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	comical_tool "github.com/kiritoxkiriko/comical-tool/biz/handler/comical_tool"
	"github.com/kiritoxkiriko/comical-tool/internal/services"
)

func main() {
	// Initialize services
	err := comical_tool.InitServices()
	if err != nil {
		log.Fatalf("Failed to initialize services: %v", err)
	}

	h := server.Default()

	register(h)

	// Start cleanup routine for old analytics
	go startCleanupRoutine()

	// Start server in a goroutine
	go func() {
		h.Spin()
	}()

	log.Printf("Server started successfully")

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("Shutting down server...")

	// Give outstanding requests 30 seconds to complete
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := h.Shutdown(ctx); err != nil {
		log.Printf("Server forced to shutdown: %v", err)
	}

	log.Println("Server exited")
}

// startCleanupRoutine starts a background routine to clean up old analytics data
func startCleanupRoutine() {
	analyticsService := services.NewAnalyticsService()
	ticker := time.NewTicker(24 * time.Hour) // Run daily
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			ctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)
			err := analyticsService.CleanupOldAnalytics(ctx, 30) // 30 days retention
			cancel()

			if err != nil {
				hlog.Errorf("Failed to cleanup old analytics: %v", err)
			} else {
				hlog.Info("Successfully cleaned up old analytics data")
			}
		}
	}
}
